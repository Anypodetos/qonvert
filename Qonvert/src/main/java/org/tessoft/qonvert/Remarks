v1.3
* display musical interval names (https://de.wikipedia.org/wiki/Tonstruktur_(mathematische_Beschreibung))
  + http://www.huygens-fokker.org/docs/intervals.html!! → C:\Users\Michael\Documents\Qonvert\Interval names.txt, Intervals sorted.txt
  + All formats screen
  + German translations
* startup speed
* custom keyboard: https://stackoverflow.com/questions/9577304/how-can-you-make-a-custom-keyboard-in-android/45005691#45005691
  + keyboardButton, onPause, onResume, setNumKeyboard
* activate histEntry in parsePositional
  + handling (e.g. "?2 = 7/6" from History to input line) s.a. copyToInput
  + QNumber.errorMessage: "@#$€£¥%&-" → "@#$€£¥%&-?"; uncomment a few lines below that
  + item numbering in ListActivity
* Google store: better splash image
* APK → bundle
* CHECK Qnumber.kt from constructor > emojis, ListActivity

v1.3.1+
* List entries: save output string for speed?
* copy/share compatible (from Main ["copy" menu] and List [3 toggle buttons "standard/pretty/compatible" at bottom])
    fractional expansion instead of recurring part, hide base, fractions not pretty, no "…", no spaces, continued/Egyptian fractions algebraic?, complement digits?

v1.4
* DMS
* more Egyptian fraction methods
* All formats screen
  + calculate more digits and more Egyptian fraction terms in background (on demand?)

v1.5+ (ideas)
* system change by swiping
* copy complement notation with some number of digits, circled numbers, … to clipboard
* base tokens $%&... customisable
* other non-standard number systems (s. WP)
  + factorial base
  + Greek
  + negative bases
  + SCI/ENG input/output
  + custom digit sets (Base32, Base64 & their variants…)
  + non-adjacent forms, quote notation, …
* specialNumbers etc.: ↊=10, ↋=11
  + https://unicode-search.net/unicode-namesearch.pl?term=NUMBER
  + https://unicode-search.net/unicode-namesearch.pl?term=FRACTION
  + additional Roman numerals for input (ↅ=6, various dots, fractions < 1/12)
* themes/colours
  + changing theme does not always work for main activity
  + icon adaptive (blue): https://www.youtube.com/watch?v=ts98gL1JCQU

v2+ (idea)
* simple calculations

NOTES ON RELEASE PROCEDURE
* Keystore (done)
  + Build > Generate Signed APK (alias is just some name)
  + C:\Users\Michael\Documents\Qonvert\qonvert.jks
  + Convert to PKCS12 with C:\Program Files\Android\Android Studio\jre\jre\bin\keytool.exe
    - keytool -importkeystore -srckeystore C:\Users\Michael\Documents\Qonvert\qonvert.jks -destkeystore C:\Users\Michael\Documents\Qonvert\qonvert.jks -deststoretype pkcs12 -destkeypass "..."
* Release
  + build release variant (View > Tool Windows > Build Variants)
  + sign AAB (bundle) with C:\Users\Michael\.jdks\corretto-1.8.0_275\bin\jarsigner.exe
    - jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore C:\Users\Michael\Documents\Qonvert\qonvert.jks -signedjar Qonvert-signed.aab
      C:\Users\Michael\Documents\Qonvert\Qonvert\build\outputs\bundle\release\Qonvert-release.aab first_qonvert

* ARCHIVED - MOST LIKELY NOT USEFUL ANY MORE
  + zipalign with C:\Users\Michael\AppData\Local\Android\Sdk\build-tools\29.0.2\zipalign.exe: DON'T DO THIS
    - zipalign -f -v 4 "C:\Users\Michael\Documents\Qonvert\Qonvert\build\outputs\apk\release\Qonvert-release-unsigned.apk" "Qonvert-110.apk"
    - move Qonvert-release-unsigned-aligned.apk from zipalign folder to Qonvert\build\outputs\apk\release folder
  + sign APK with C:\Users\Michael\AppData\Local\Android\Sdk\build-tools\29.0.2\apksigner.bat
    - LINE 30: if not defined java_exe set java_exe="C:\Users\Michael\.jdks\corretto-1.8.0_275\jre\bin\java.exe" (or wherever a java.exe is)
    - IGNORE THE ERROR MESSAGE IF IT ASKS FOR PASSWORD ANYWAY
    - apksigner sign --ks qonvert.jks "C:\Users\Michael\Documents\Qonvert\Qonvert\build\outputs\apk\release\Qonvert-release-unsigned.apk"


            /*  C a l c  -  maybe for v2  */

    operator fun compareTo(other: QNumber) = (numerator * other.denominator - denominator * other.numerator).signum()
    operator fun compareTo(other: BigInteger) = (numerator - denominator * other).signum()
    operator fun compareTo(other: Int) = (numerator - denominator * other.toBigInteger()).signum()
    override operator fun equals(other: Any?) = when (other) {
        is QNumber -> compareTo(other) == 0
        is BigInteger -> compareTo(other) == 0
        is Int -> compareTo(other) == 0
        else -> throw (IllegalArgumentException("Can only compare a QNumber to a QNumber, a BigInteger or an Int"))
    }
    override fun hashCode() = 31 * numerator.hashCode() + denominator.hashCode()

    operator fun plus (other: QNumber) = QNumber(numerator * other.denominator + denominator * other.numerator, denominator * other.denominator, base, system, complement, format)
    operator fun minus(other: QNumber) = QNumber(numerator * other.denominator - denominator * other.numerator, denominator * other.denominator, base, system, complement, format)
    operator fun times(other: QNumber) = QNumber(numerator * other.numerator,                                   denominator * other.denominator, base, system, complement, format)
    operator fun div  (other: QNumber) = QNumber(numerator * other.denominator,                                 denominator * other.denominator, base, system, complement, format)

    fun abs() = QNumber(numerator.abs(), denominator,                     base, system, complement, format)
    fun inv() = QNumber(denominator, numerator,                           base, system, complement, format)
    fun sqr() = QNumber(numerator * numerator, denominator * denominator, base, system, complement, format)
